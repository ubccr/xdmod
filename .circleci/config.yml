# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1

executors:
  rocky8: &rocky8-executor
    docker:
      - image: tools-ext-01.ccr.xdmod.org/xdmod-10.5.0-x86_64:rockylinux8.5-0.3
jobs:
  build:
    parameters:
      os:
        type: executor
      install-type:
        type: string
    executor: << parameters.os >>
    environment:
      COMPOSER_ALLOW_SUPERUSER: 1
      XDMOD_REALMS: 'jobs,storage,cloud,resourcespecifications'
      TRAVIS_COMMIT_RANGE: << pipeline.git.base_revision >>..<<pipeline.git.revision>>
      XDMOD_IS_CORE: yes
      XDMOD_INSTALL_DIR: /xdmod
      XDMOD_TEST_MODE: << parameters.install-type >>
    steps:
      - run:
          name: Generate OpenSSL Key
          command: openssl genrsa -rand /proc/cpuinfo:/proc/filesystems:/proc/interrupts:/proc/ioports:/proc/uptime 2048 > /etc/pki/tls/private/localhost.key
      - run:
          name: Generate Certificate
          command: /usr/bin/openssl req -new -key /etc/pki/tls/private/localhost.key -x509 -sha256 -days 365 -set_serial $RANDOM -extensions v3_req -out /etc/pki/tls/certs/localhost.crt -subj "/C=XX/L=Default City/O=Default Company Ltd"
      - checkout
      # We need to update our acct before we can enable docker layer caching
      #- setup_remote_docker:
      #    docker_layer_caching: true
      # Download and cache dependencies
      - run:
          name: Update php module
          command: dnf module -y reset php && dnf module -y enable php:7.4
      - run:
          name: Install PHP 7.4 and PHP module pre-reqs & an updated version of PHP Pear
          command: dnf install -y php libzip-devel php-pear php-devel
      - run:
          name: Install MongoDB Pear module
          command: yes '' | pecl install mongodb || true
      - run:
            name: install the composer dependencies
            command: composer install
      - run:
          name: Create Test Artifact Directories
          command: |
            mkdir ~/phpunit
            mkdir /tmp/screenshots
      - run:
          name: Build XDMoD RPM
          command: ~/bin/buildrpm xdmod
      - run:
          name: Install / Upgrade XDMoD from RPM
          command: ./tests/ci/bootstrap.sh
      - run:
          name: Validate the newly installed / Upgraded XDMoD
          command: ./tests/ci/validate.sh
      - run:
          name: Make sure that the Composer Test Dependencies are installed
          command: composer install --no-progress
      - run:
          name: Setup Configuration Files for Integration Tests
          command: |
            mv ./configuration/organization.json ./configuration/organization.json.old
            mv ./configuration/portal_settings.ini ./configuration/portal_settings.ini.old
            cp /etc/xdmod/portal_settings.ini ./configuration/portal_settings.ini
            cp /etc/xdmod/organization.json ./configuration/organization.json
      - run:
          name: Setup & Run QA Tests
          command: |
            ./tests/ci/scripts/qa-test-setup.sh
      - run:
          name: Clear out command-line PHP errors generated by composer installs
          command: >
            if [ -e /var/log/php_errors.log ]; then
              sed -i '/PHP Warning:  openssl_x509_parse(): illegal ASN1 data type for timestamp in - on line 4/d' /var/log/php_errors.log;
            fi
      - run: ./tests/regression/runtests.sh
      - run: ./tests/integration/runtests.sh --junit-output-dir ~/phpunit
      - run: ./tests/regression/post_ingest_test.sh --junit-output-dir ~/phpunit
      - run: ./tests/component/runtests.sh --junit-output-dir ~/phpunit
      - run:
          name: Ensure that no XDMoD exceptions were logged
          command: test ! -f /root/xdmod/logs/exceptions.log
      - run: pushd $HOME && rm -f chromedriver_linux64.zip && wget https://chromedriver.storage.googleapis.com/106.0.5249.61/chromedriver_linux64.zip && popd
      - run:
          name: 'Bodge the nodejs version to run an older one for the webdriver tests'
          command: |
            curl https://nodejs.org/dist/v10.24.1/node-v10.24.1-linux-x64.tar.xz | tar -xJC /usr/local
            chown root:root -R /usr/local/node-v10.24.1-linux-x64
      - run: pushd ./tests/ui && PATH=/usr/local/node-v10.24.1-linux-x64/bin:$PATH /usr/local/node-v10.24.1-linux-x64/bin/npm install && popd
      - run: PATH=/usr/local/node-v10.24.1-linux-x64/bin:$PATH ./tests/ui/runtests.sh --headless --log-junit ~/phpunit

      - run:
          name: 'Run SSO Tests'
          command: |
            PATH=/usr/local/node-v10.24.1-linux-x64/bin:$PATH ./tests/ci/samlSetup.sh
            PATH=/usr/local/node-v10.24.1-linux-x64/bin:$PATH ./tests/ui/runtests.sh --headless --log-junit ~/phpunit --sso
            ./vendor/phpunit/phpunit/phpunit -c ./tests/integration/phpunit.xml.dist --testsuite sso --log-junit ~/phpunit/xdmod-sso-integration.xml
      - run:
          name: Ensure that no unexpected Apache errors were generated ( We expect PHP Deprecated )
          command: >
            if [ -e /var/log/php-fpm/www-error.log ]; then
              test `egrep -v "PHP Deprecated.*vendor\/.*" /var/log/php-fpm/www-error.log | wc -l` = 0;
            fi
      - run:
          name: Ensure that no PHP command-line errors were generated
          command: >
              if [ -e /var/log/php_errors.log ]; then
                  test `egrep -v "PHP Deprecated.*vendor\/.*|PHP Notice:  fread()" /var/log/php_errors.log | wc -l` = 0;
              fi
      - store_artifacts:
          path: /tmp/screenshots
      - store_artifacts:
          path: /var/log/xdmod
      - store_artifacts:
          path: /var/log/php-fpm
      - store_artifacts:
          path: /var/log/php_errors.log
      - store_artifacts:
          path: /root/xdmod/logs
      - store_test_results:
          path: ~/phpunit

workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              os: [rocky8]
              install-type: ["fresh_install", "upgrade"]
