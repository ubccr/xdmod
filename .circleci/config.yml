# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1

executors:
  rocky8: &rocky8-executor
    docker:
      - image: cimg/base:current
jobs:
  build:
    parameters:
      os:
        type: executor
      install-type:
        type: string
      string_os:
        type: string
      schedule-name:
        type: string
    executor: << parameters.os >>
    environment:
      COMPOSER_ALLOW_SUPERUSER: 1
      XDMOD_REALMS: 'jobs,storage,cloud,resourcespecifications'
      QA_BRANCH: 'v2'
      TRAVIS_COMMIT_RANGE: << pipeline.git.base_revision >>..<<pipeline.git.revision>>
      XDMOD_IS_CORE: yes
      XDMOD_INSTALL_DIR: /root/xdmod
      XDMOD_TEST_MODE: << parameters.install-type >>
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Docker Compose corresponding OS file
          command: docker compose -f ~/project/tests/playwright/Docker/docker-compose.yml up -d
      - run:
          name: Generate Key for XDMoD
          command: docker exec xdmod openssl genrsa -out /etc/pki/tls/private/localhost.key -rand /proc/cpuinfo:/proc/filesystems:/proc/interrupts:/proc/ioports:/proc/uptime 2048
      - run:
          name: Generate Cert for XDMoD
          command: docker exec xdmod /usr/bin/openssl req -new -key /etc/pki/tls/private/localhost.key -x509 -sha256 -days 365 -set_serial $RANDOM -extensions v3_req -out /etc/pki/tls/certs/localhost.crt -subj "/C=XX/L=Default City/O=Default Company Ltd"
      - run:
          name: Copy Files for Playwright and XDMoD containers
          command: |
            docker cp ~/project xdmod:/root/xdmod
            docker cp ~/project playwright:/root/xdmod
      - run:
          name: Create test result directories
          command: |
            rm -rf ~/phpunit
            mkdir ~/phpunit
            rm -rf /tmp/screenshots
            mkdir /tmp/screenshots
      - run:
          name: Create Test Artifact Directories in XDMoD
          command: |
            docker exec xdmod mkdir /root/phpunit
            docker exec xdmod mkdir /tmp/screenshots
            docker exec xdmod mkdir /root/code_coverage_raw
            docker exec xdmod mkdir /root/code_coverage
      - run:
          name: Install XDMoD Composer Dependencies
          command: docker exec -w /root/xdmod xdmod composer install
      - run:
          name: Build XDMoD RPM
          command: docker exec -w /root/xdmod xdmod /root/bin/buildrpm xdmod
      - run:
          name: Install / Upgrade XDMoD from the newly created RPM
          command: docker exec -e XDMOD_TEST_MODE=<< parameters.install-type >> xdmod /root/xdmod/tests/ci/bootstrap.sh
      - run:
          name: Validate that the install / upgrade went as expected
          command: docker exec -w /root/xdmod xdmod /root/xdmod/tests/ci/validate.sh
      - run:
          name: Make sure that the test dependencies are installed
          command: docker exec -w /root/xdmod xdmod composer install
      - run:
          name: Setup the SimpleSAML server etc. so we can test SSO
          command: docker exec xdmod /root/xdmod/tests/ci/samlSetup.sh
      - when:
          condition:
            equal: [ << parameters.install-type >>, 'upgrade' ]
          steps:
            - run:
                name: Checkout QA Repo
                command: docker exec -w /root xdmod git clone --depth=1 --branch="$QA_BRANCH" https://github.com/ubccr/xdmod-qa.git /root/.qa
            - run:
                name: Install QA dependencies
                command: docker exec -w /root/xdmod xdmod /root/.qa/scripts/install.sh
            - run:
                name: Configure xdmod as a safe directory
                command: docker exec -w /root/xdmod xdmod git config --global --add safe.directory /xdmod
            - run:
                name: Setup remote upstream
                command: |
                  docker exec -w /root/xdmod xdmod git config --global --add safe.directory /root/xdmod
                  docker exec -w /root/xdmod xdmod git remote add upstream https://github.com/ubccr/xdmod.git
            - run:
                name: Copy portal_settings.ini into place
                command: docker exec xdmod cp /etc/xdmod/portal_settings.ini /root/xdmod/configuration/portal_settings.ini
            - run:
                name: Run QA Tests
                command: docker exec -w /root/xdmod xdmod /root/.qa/scripts/build.sh
      - run:
          name: Make sure that the Test Dependencies are installed
          command: docker exec -w /root/xdmod xdmod composer install --no-progress
      - when:
          condition:
            and:
              - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
              - equal: [ "xdmod-time-trigger", << pipeline.schedule.name >> ]

          steps:
            - run:
                name: Installing Code Coverage Dependencies
                command: |
                  docker exec -w /root/xdmod xdmod /root/xdmod/tools/dev/code_coverage/codeCoverageSetup.sh -b . -x /root/xdmod/tools/dev/code_coverage/start_xdebug.php -p /root/xdmod/tools/dev/code_coverage/combine_xdebug.php

      - run:
          name: Run Regression Tests
          command: docker exec -e XDMOD_TEST_MODE=<< parameters.install-type >> -w /root/xdmod xdmod /root/xdmod/tests/regression/runtests.sh
      - run:
          name: Setup Configuration Files for Integration Tests
          command: |
            docker exec xdmod mv /root/xdmod/configuration/organization.json /root/xdmod/configuration/organization.json.old
            docker exec xdmod mv /root/xdmod/configuration/portal_settings.ini /root/xdmod/configuration/portal_settings.ini.old
            docker exec xdmod cp /etc/xdmod/portal_settings.ini /root/xdmod/configuration/portal_settings.ini
            docker exec xdmod cp /etc/xdmod/organization.json /root/xdmod/configuration/organization.json

      - run:
          name: Running Integration Tests
          command: docker exec -w /root/xdmod xdmod /root/xdmod/tests/integration/runtests.sh --junit-output-dir /root/phpunit
      - run:
          name: Run Regression Post Ingest Tests
          command: docker exec -w /root/xdmod xdmod /root/xdmod/tests/regression/post_ingest_test.sh --junit-output-dir /root/phpunit
      - run:
          name: Run Component Tests
          command: docker exec -w /root/xdmod xdmod /root/xdmod/tests/component/runtests.sh --junit-output-dir /root/phpunit
      - run:
          name: Update the HTTPD config file
          command: docker exec xdmod sed -i 's/ServerName localhost/ServerName xdmod/g' /etc/httpd/conf.d/xdmod.conf
      - run:
          name: Restart XDMoD's services
          command: docker exec xdmod /root/bin/services restart
      - run:
          name: Run Playwright Tests
          command: docker exec -w /root/xdmod/tests/playwright playwright /root/xdmod/tests/playwright/runtests.sh -j << parameters.string_os >>
      - when:
          condition:
            and:
              - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
              - equal: [ "xdmod-time-trigger", << pipeline.schedule.name >> ]
          steps:
            - run:
                name: Process Code Coverage Data
                no_output_timeout: 120m
                command: docker exec -w /root/xdmod xdmod /root/xdmod/tools/dev/code_coverage/codeCoverageProcess.sh -i /root/code_coverage_raw
            - run:
                name: Tar Up Code Coverage Report for later download
                command: docker exec -it xdmod sh -c "tar -czvf ~/code_coverage/report.tgz ~/code_coverage_raw"
            - run:
                name: Copy Code Coverage Report to Host
                command: docker cp xdmod:/root/code_coverage ~/code_coverage

      - run:
          name: Copy Test Results into Unit
          command: |
            docker cp xdmod:/root/phpunit ~/phpunit
            docker cp xdmod:/tmp/screenshots /tmp/screenshots
            mkdir ~/project/log
            docker cp xdmod:/var/log/xdmod ~/project/log
            docker cp xdmod:/var/log/php-fpm/ ~/project/log
            docker cp playwright:/root/xdmod/tests/playwright/test-results /tmp/screenshots
      - run:
          name: Copy Test results for Operating System
          command: |
            docker cp "playwright:/root/xdmod/tests/playwright/test_results-<< parameters.string_os >>.xml" ~/phpunit
      - run:
          name: Clear out command-line PHP errors generated by composer installs
          command: >
            if [ -e ~/project/log/php_errors.log ]; then sed -i '/PHP Warning:  openssl_x509_parse(): illegal ASN1 data type for timestamp in - on line 4/d' /var/log/php_errors.log; fi
      - run:
          name: Test to make sure that we don't have any unexpected apache errors
          command: >
            if [ -e ~/project/log/apache-error.log ]; then
                test "$(fgrep -v ' [ssl:warn] ' ~/project/log/apache-error.log | wc -l)" = 0
            fi
      - run:
          name: Ensure that no unexpected Apache errors were generated
          command: test ! -e ~/project/log/error.log
      - run:
          name: Ensure that no PHP command-line errors were generated
          command: >
            if [ -e ~/project/log/php_errors.log ]; then test `fgrep -v 'vendor/phpunit/phpunit/src' ~/project/log/php_errors.log | wc -l` = 0; fi
      - run:
          name: Run on fail status
          command: |
            docker cp playwright:/root/xdmod/tests/playwright/test-results /tmp/screenshots
          when: on_fail
      - store_artifacts:
          path: /tmp/screenshots
      - store_artifacts:
          path: /var/log/xdmod
      - store_artifacts:
          path: /var/log/php-fpm
      - store_artifacts:
          path: /var/log/php_errors.log
      - store_artifacts:
          path: /root/xdmod/logs
      - store_test_results:
          path: ~/phpunit
      - when:
          condition:
            and:
              - equal: ["xdmod-time-trigger", << parameters.schedule-name >>]
          #            and:
          #              - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
          #              - equal: [ "xdmod-time-trigger", << pipeline.schedule.name >> ]
          steps:
            - store_artifacts:
                path: ~/code_coverage

workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              os: [rocky8]
              install-type: ["fresh_install", "upgrade"]
              string_os: [rocky8]
              schedule-name: ["xdmod-time-trigger"]
