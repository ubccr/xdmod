# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1

executors:
  centos7: &centos7-executor
    docker:
      - image: tools-ext-01.ccr.xdmod.org/xdmod-10.0.0:centos7.9-0.6
  centos8: &centos8-executor
    docker:
      - image: tools-ext-01.ccr.xdmod.org/centos8-0.5:base
jobs:
  build:
    parameters:
      os:
        type: executor
      install-type:
        type: string
    executor: << parameters.os >>
    environment:
      COMPOSER_ALLOW_SUPERUSER: 1
      XDMOD_REALMS: 'jobs,storage,cloud'
      TRAVIS_COMMIT_RANGE: << pipeline.git.base_revision >>..<<pipeline.git.revision>>
      XDMOD_IS_CORE: yes
      XDMOD_INSTALL_DIR: /xdmod
      XDMOD_TEST_MODE: << parameters.install-type >>
    steps:
      - run:
          name: Generate OpenSSL Key
          command: openssl genrsa -rand /proc/cpuinfo:/proc/dma:/proc/filesystems:/proc/interrupts:/proc/ioports:/proc/uptime 2048 > /etc/pki/tls/private/localhost.key
      - run:
          name: Generate Certificate
          command: /usr/bin/openssl req -new -key /etc/pki/tls/private/localhost.key -x509 -sha256 -days 365 -set_serial $RANDOM -extensions v3_req -out /etc/pki/tls/certs/localhost.crt -subj "/C=XX/L=Default City/O=Default Company Ltd"
      - checkout
      # We need to update our acct before we can enable docker layer caching
      #- setup_remote_docker:
      #    docker_layer_caching: true
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: composer install --no-progress
      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - run:
          name: Create Test Artifact Directories
          command: |
            mkdir ~/phpunit
            mkdir /tmp/screenshots
      - run: ~/bin/buildrpm xdmod
      - run:
          name: Install / Upgrade XDMoD from RPM
          command: ./tests/ci/bootstrap.sh
      - run:
          name: Validate the newly installed / Upgraded XDMoD
          command: ./tests/ci/validate.sh
      - run:
          name: Make sure that the Composer Test Depedencies are installed
          command: composer install --no-progress
      - run:
          name: Setup & Run QA Tests
          command: ./tests/ci/scripts/qa-test-setup.sh
      - run:
          name: Make sure that the Composer Test Depedencies are installed
          command: composer install --no-progress
      - run: ./tests/regression/runtests.sh
      - run:
          name: Setup Configuration Files for Integration Tests
          command: |
            mv ./configuration/organization.json ./configuration/organization.json.old
            mv ./configuration/portal_settings.ini ./configuration/portal_settings.ini.old
            cp /etc/xdmod/portal_settings.ini ./configuration/portal_settings.ini
            cp /etc/xdmod/organization.json ./configuration/organization.json
      - run: ./tests/integration/runtests.sh --junit-output-dir ~/phpunit
      - run: ./tests/regression/post_ingest_test.sh --junit-output-dir ~/phpunit
      - run: ./tests/component/runtests.sh --junit-output-dir ~/phpunit
      - when:
          condition:
            equal: [ *centos7-executor, << parameters.os >> ]
          steps:
            - run: scl enable rh-nodejs6 "./tests/ui/runtests.sh --headless --log-junit ~/phpunit"
            - run:
                name: 'Run SSO Tests'
                command: |
                  scl enable rh-nodejs6 "./tests/ci/samlSetup.sh"
                  scl enable rh-nodejs6 "./tests/ui/runtests.sh --headless --log-junit ~/phpunit --sso"
                  ./vendor/phpunit/phpunit/phpunit -c ./tests/integration/phpunit.xml.dist --testsuite sso --log-junit ~/phpunit/xdmod-sso-integration.xml
      - when:
          condition:
            equal: [ *centos8-executor, << parameters.os >> ]
          steps:
            - run: ./tests/ui/runtests.sh --headless --log-junit ~/phpunit
            - run:
                name: 'Run SSO Tests'
                command: |
                  ./tests/ci/samlSetup.sh
                  ./tests/ui/runtests.sh --headless --log-junit ~/phpunit --sso
                  ./vendor/phpunit/phpunit/phpunit -c ./tests/integration/phpunit.xml.dist --testsuite sso --log-junit ~/phpunit/xdmod-sso-integration.xml
      - run:
          name: Ensure that no unexpected Apache errors were generated
          command: test `fgrep -v ' [ssl:warn] ' /var/log/xdmod/apache-error.log | wc -l` = 0
      - store_artifacts:
          path: /tmp/screenshots
      - store_artifacts:
          path: /var/log/xdmod
      - store_test_results:
          path: ~/phpunit

workflows:
  full-build:
    jobs:
      - build:
          matrix:
            parameters:
              os: [centos7, centos8]
              install-type: ["fresh_install", "upgrade"]
            exclude:
              - os: centos8
                install-type: "upgrade"
