#!/usr/bin/env php
<?php
/**
 * Update resource specifications.
 *
 * @package OpenXdmod
 *
 * @author Jeffrey T. Palmer <jtpalmer@buffalo.edu>
 */

require_once __DIR__ . '/../configuration/linker.php';

use CCR\Log;
use CCR\Json;

// Catch any unexpected exceptions.
try {
    main();
} catch (Exception $e) {
    do {
        fwrite(STDERR, $e->getMessage() . "\n");
        fwrite(STDERR, $e->getTraceAsString() . "\n");
    } while ($e = $e->getPrevious());
    exit(1);
}

/**
 * Main function.
 */
function main()
{
    global $argv, $logger;

    $opts = array(
        array('h',  'help'),
        array('v',  'verbose'),
        array('',   'debug'),
        array('q',  'quiet'),
        array('',   'force'),
        array('r:', 'resource:'),
        array('',   'start-date:'),
        array('',   'end-date:'),
        array('',   'cpu-node-count:'),
        array('',   'cpu-count:'),
        array('',   'gpu-node-count:'),
        array('',   'gpu-count:'),
        array('',   'percent-allocated:'),
      );

    $shortOptions = implode(
        '',
        array_map(function ($opt) { return $opt[0]; }, $opts)
    );
    $longOptions = array_map(function ($opt) { return $opt[1]; }, $opts);

    $args = getopt($shortOptions, $longOptions);

    if ($args === false) {
        fwrite(STDERR, "Failed to parse arguments\n");
        exit(1);
    }

    $help = $force = false;

    $resource = $startDate = $endDate = $cpuNodes = $cpuProcessors
        = $gpuNodes = $gpuProcessors = $percentAllocated = null;

    $logLevel = -1;

    foreach ($args as $key => $value) {
        if (is_array($value)) {
            fwrite(STDERR, "Multiple values not allowed for '$key'\n");
            exit(1);
        }

        switch ($key) {
            case 'h':
            case 'help':
                $help = true;
                break;
            case 'q':
            case 'quiet':
                $logLevel = max($logLevel, Log::WARNING);
                break;
            case 'v':
            case 'verbose':
                $logLevel = max($logLevel, Log::INFO);
                break;
            case 'debug':
                $logLevel = max($logLevel, Log::DEBUG);
                break;
            case 'force':
                $force = true;
                break;
            case 'r':
            case 'resource':
                $resource = $value;
                break;
            case 'start-date':
                $startDate = $value;
                break;
            case 'end-date':
                $endDate = $value;
                break;
            case 'cpu-node-count':
                $cpuNodes = $value;
                break;
            case 'cpu-count':
                $cpuProcessors = $value;
                break;
            case 'gpu-node-count':
                $gpuNodes = $value;
                break;
            case 'gpu-count':
                $gpuProcessors = $value;
                break;
            case 'percent-allocated':
                $percentAllocated = $value;
                break;
            default:
                fwrite(STDERR, "Unexpected option '$key'\n");
                exit(1);
                break;
        }
    }

    if ($help) {
        displayHelpText();
        exit;
    }

    if ($logLevel === -1) { $logLevel = Log::NOTICE; }

    $conf = array(
        'file'            => false,
        'mail'            => false,
        'consoleLogLevel' => $logLevel,
    );

    $logger = Log::factory('xdmod-urs', $conf);

    $cmd = implode(' ', array_map('escapeshellarg', $argv));
    $logger->info("Command: $cmd");

    if ($resource === null) {
        $logger->crit('No resource specified');
        exit(1);
    }

    if (
        $startDate !== null
        && !preg_match('/^\d{4}-\d{2}-\d{2}$/', $startDate)
    ) {
        $logger->crit("Invalid start date '$startDate'");
        exit(1);
    }

    if (
        $endDate !== null
        && !preg_match('/^\d{4}-\d{2}-\d{2}$/', $endDate)
    ) {
        $logger->crit("Invalid end date '$endDate'");
        exit(1);
    }

    if (
        $cpuNodes !== null
        && filter_var($cpuNodes, FILTER_VALIDATE_INT) === false
    ) {
        $logger->crit("The cpu-node-count value must be an integer");
        exit(1);
    }

    if (
        $gpuNodes !== null
        && filter_var($gpuNodes, FILTER_VALIDATE_INT) === false
    ) {
        $logger->crit("The gpu-node-count value must be an integer");
        exit(1);
    }

    if (
        $cpuProcessors !== null
        && filter_var($cpuProcessors, FILTER_VALIDATE_INT) === false
    ) {
        $logger->crit("The cpu-count value must be an integer");
        exit(1);
    }

    if (
        $gpuProcessors !== null
        && filter_var($gpuProcessors, FILTER_VALIDATE_INT) === false
    ) {
        $logger->crit("The gpu-count value must be an integer");
        exit(1);
    }

    $resourceSpecsFile = implode(
        DIRECTORY_SEPARATOR,
        array(
            CONFIG_DIR,
            'resource_specs.json'
        )
    );

    $resourceSpecsData = Json::loadFile($resourceSpecsFile);

    $logger->debug(array(
        'message' => 'Loaded resource spec data',
        'data'    => json_encode($resourceSpecsData),
    ));

    // Resource specs for the specified resource.
    $resourceData = array_filter(
        $resourceSpecsData,
        function ($datum) use ($resource) {
            return $datum['resource'] === $resource;
        }
    );

    if (!verifyResourceSpecs($resourceData) && !$force) {
        $logger->err('Current resource_specs.json is not valid (see above)');
        exit(1);
    }

    // Order specs by end date.
    usort(
        $resourceData,
        function ($a, $b) {
            if (!isset($a['end_date'])) {
                return 1;
            }

            if (!isset($b['end_date'])) {
                return -1;
            }

            return strcmp($a['end_date'], $b['end_date']);
        }
    );

    if (count($resourceData) > 0) {
        $lastEntry = $resourceData[count($resourceData) - 1];

        if ($cpuNodes === null) {
            $cpuNodes = $lastEntry['cpu_node_count'];
        }

        if ($cpuProcessors === null) {
            $cpuProcessors = $lastEntry['cpu_processor_count'];
        }

        if ($gpuNodes === null) {
            $gpuNodes = $lastEntry['gpu_node_count'];
        }

        if ($gpuProcessors === null) {
            $gpuProcessors = $lastEntry['gpu_processor_count'];
        }

        if (
            $percentAllocated === null
            && isset($lastEntry['percent_allocated'])
        ) {
            $percentAllocated = $lastEntry['percent_allocated'];
        }

        $oneDay = new DateInterval('P1D');

        if ($startDate === null) {
            if (isset($lastEntry['end_date'])) {
                $startDt = new DateTime($lastEntry['end_date']);
                $startDt->add($oneDay);
                $startDate = $startDt->format('Y-m-d');
            } else {
                $startDate = date('Y-m-d');
            }

            $logger->debug("Using calculated start date '$startDate'");
        }

        if (!isset($lastEntry['end_date'])) {
            $endDt = new DateTime($startDate);
            $endDt->sub($oneDay);
            $previousEndDate = $endDt->format('Y-m-d');
            $resourceData[count($resourceData) - 1]['end_date']
                = $previousEndDate;
            $msg = "Updating last entry end date to '$previousEndDate'";
            $logger->debug($msg);
        }
    }

    if ($startDate === null) {
        $startDate = date('Y-m-d');
        $logger->debug("Using calculated start date '$startDate'");
    }

    $cpuPpn = ($cpuNodes == 0) ? 0 : $cpuProcessors / $cpuNodes;
    $gpuPpn = ($gpuNodes == 0) ? 0 : $gpuProcessors / $gpuNodes;

    $newEntry = array(
        'resource'              => $resource,
        'start_date'            => $startDate,
        'end_date'              => $endDate,
        'cpu_node_count'        => (int)$cpuNodes,
        'cpu_processor_count'   => (int)$cpuProcessors,
        'cpu_ppn'               => (int)$cpuPpn,
        'gpu_node_count'        => (int)$gpuNodes,
        'gpu_processor_count'   => (int)$gpuProcessors,
        'gpu_ppn'               => (int)$gpuPpn
    );

    if ($endDate === null) {
        unset($newEntry['end_date']);
    }

    if (!is_null($percentAllocated)) {
        $newEntry['percent_allocated'] = (int)$percentAllocated;
    }

    $resourceData[] = $newEntry;

    if (!verifyResourceSpecs($resourceData) && !$force) {
        $logger->err('New resource specs are not valid (see above)');
        exit(1);
    }

    // Resource specs for all the other resources.
    $otherResourceData = array_filter(
        $resourceSpecsData,
        function ($datum) use ($resource) {
            return $datum['resource'] !== $resource;
        }
    );

    $resourceSpecsData = array_merge($otherResourceData, $resourceData);

    Json::saveFile($resourceSpecsFile, $resourceSpecsData);
}

/**
 * Verify that resource specs are accurate.
 *
 * Assumes that spec entries are ordered correctly and that there are
 * no gaps between entries.
 */
function verifyResourceSpecs(array $resourceData)
{
    global $logger;

    $logger->debug('Verifying resource specs: ' . json_encode($resourceData));

    $valid = true;

    $lastEndDt = null;

    $lastStartDt = null;

    $prevEntry = null;

    $oneDay = new DateInterval('P1D');

    $lastIdx = count($resourceData) - 1;

    foreach (array_values($resourceData) as $i => $datum) {
        $logger->debug('Verifying entry: ' . json_encode($datum));

        $startDate
            = isset($datum['start_date'])
            ? $datum['start_date']
            : null;

        $endDate
            = isset($datum['end_date'])
            ? $datum['end_date']
            : null;

        if (
            $startDate !== null
            && !preg_match('/^\d{4}-\d{2}-\d{2}$/', $startDate)
        ) {
            $logger->err("Invalid start date '$startDate'");
        }

        if (
            $endDate !== null
            && !preg_match('/^\d{4}-\d{2}-\d{2}$/', $endDate)
        ) {
            $logger->err("Invalid end date '$endDate'");
        }

        // The last entry doesn't require an end date.
        if ($i === $lastIdx && $endDate !== null) {
            $logger->debug('Last entry has an end date');
        }

        // Check if the entry has the same start date as the previous entry
        if (
            $lastStartDt !== null
            && $lastStartDt->format('Y-m-d') == $startDate)
        {
            $valid = false;
            $logger->err("The start time for this entry matches the start time for the previous entry.");
            $logger->err("Previous entry: " . json_encode($prevEntry));
            $logger->err("Current entry: " . json_encode($datum));
        }

        // All entries require a start date.
        if ($startDate === null) {
            $valid = false;
            $msg = 'Entry is missing required start date: '
                . json_encode($datum);
            $logger->err($msg);
        }

        // End date should not be before start date.
        if (
            !is_null($startDate)
            && !is_null($endDate)
            && $endDate < $startDate
        ) {
            $valid = false;
            $msg = 'End date is before start date: '
                . json_encode($datum);
            $logger->err($msg);
        }

        // Check that the start date for an entry is one day ahead of the end date
        // for the previous entry
        if ($i > 0 && $endDate !== null) {
            $expectedStartDt = clone $lastEndDt;
            $expectedStartDt->add($oneDay);

            $expectedStartDate = $expectedStartDt->format('Y-m-d');

            if ($startDate !== $expectedStartDate) {
                $msg = "Expected start_date '$expectedStartDate', but"
                    . " found '$startDate': " . json_encode($datum);
                $logger->err($msg);
                $valid = false;
            }
        }

        if ($i < $lastIdx) {

            // All entries other than the last require an end date.
            if ($endDate === null) {
                $valid = false;
                $msg = 'Entry is missing required end date: '
                    . json_encode($datum);
                $logger->err($msg);
            }
        }

        if ($endDate !== null) {
            $lastEndDt = new DateTime($endDate);
        }

        if ($startDate !== null) {
            $lastStartDt = new DateTime($startDate);
        }

        $prevEntry = $datum;
    }

    return $valid;
}

/**
 * Output help text to STDOUT.
 */
function displayHelpText()
{
    echo <<<'EOF'

Update resource specifications stored in resource_specs.json.

If you do not specify the start and end dates, the new resource specs
entry will start today and the previously last resource specs entry's
end date will be updated to yesterday (assuming it was not already set).

Usage: xdmod-update-resource-specs -r *resource* ...

    -h, --help
        Display this message and exit.

    -v, --verbose
        Output info level logging.

    --debug
        Output debug level logging.

    -q, --quiet
        Output warning level logging.

    --force
        Allow invalid resource spec entries.

    -r, --resource *resource*
        Specify the resource to update.

    --start-date *start-date*
        Specify the resource spec start date (YYYY-MM-DD).  Defaults to
        today's date.

    --end-date *end-date*
        Specify the resource spec end date (YYYY-MM-DD).

    --cpu-node-count *cpu-node-count*
        Specify the resource spec cpu node count.  Defaults to the most
        recent cpu node count for the resource.

    --cpu-count *cpu-count*
        Specify the resource spec cpu count.  Defaults to the most
        recent cpu count for the resource.

    --gpu-node-count *gpu-node-count*
        Specify the resource spec gpu node count.  Defaults to the most
        recent gpu node count for the resource.

    --gpu-count *gpu-count*
        Specify the resource spec gpu count.  Defaults to the most
        recent gpu count for the resource.

    --percent-allocated *percent*
        Specify the resource spec percent allocated.  Defaults to the
        most recent percent allocated for the resource.

Examples:

Update the node count to 10 and cpu count to 160 for "myresource":

    xdmod-update-resource-specs -r myresource --cpu-node-count 10 --cpu-count 160

EOF;
}
