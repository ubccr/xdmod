<?php
/**
 * @package OpenXdmod\ComponentTests
 * @author Steven M. Gallo <smgallo@buffalo.edu>
 */

namespace ComponentTests\ETL;

use CCR\DB;

/**
 * Test various components of the ETLv2 ingestors.
 */

class IngestorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Load invalid data and ensure that LOAD DATA INFILE returns appropriate warning messages.
     */

    public function testLoadDataInfileWarnings() {
        $result = $this->executeOverseerAction('xdmod.ingestor-tests.test-load-data-infile-warnings');

        $this->assertEquals(0, $result['exit_status'], "Exit code");

        /* We are expecting output such as:
         *
         * 2018-03-07 12:29:03 [warning] LOAD DATA warnings on table 'load_data_infile_test' generated by action test-load-data-infile-warnings
         * 2018-03-07 12:29:03 [warning] Warning   1265    Data truncated for column 'my_enum' at row 1
         * 2018-03-07 12:29:03 [warning] Warning   1265    Data truncated for column 'my_varchar8' at row 1
         * 2018-03-07 12:29:03 [warning] Warning   1265    Data truncated for column 'my_double' at row 1
         */

        $numWarnings = 0;

        if ( ! empty($result['stdout']) ) {
            foreach ( explode(PHP_EOL, trim($result['stdout'])) as $line ) {
                $this->assertRegExp('/\[warning\]/', $line);
                $numWarnings++;
            }
        }

        $this->assertGreaterThanOrEqual(4, $numWarnings, 'Expected number of SQL warnings');
        $this->assertEquals('', $result['stderr'], "Std Error");
    }

    /**
     * Insert truncated or out of range data and ensure that the SQL statements returns warning messages.
     */

    public function testSqlWarnings() {
        $result = $this->executeOverseerAction('xdmod.ingestor-tests.test-sql-warnings');

        $this->assertEquals(0, $result['exit_status'], "Exit code");

        /* We are expecting output such as:
         *
         * 2018-03-08 13:49:08 [warning] SQL warnings on table '`modw_cloud`.`warning_test`' generated by action sql-warning-test
         * 2018-03-08 13:49:08 [warning] Warning 1264 Out of range value for column 'resource_id' at row 1
         * 2018-03-08 13:49:08 [warning] Warning 1366 Incorrect integer value: '' for column 'account_id' at row 1
         * 2018-03-08 13:49:08 [warning] Warning 1366 Incorrect integer value: '' for column 'provider_account_id' at row 1
         */

        $numWarnings = 0;

        if ( ! empty($result['stdout']) ) {
            foreach ( explode(PHP_EOL, trim($result['stdout'])) as $line ) {
                $this->assertRegExp('/\[warning\]/', $line);
                $numWarnings++;
            }
        }

        $this->assertGreaterThanOrEqual(4, $numWarnings, 'Expected number of SQL warnings');
        $this->assertEquals('', $result['stderr'], "Std Error");
    }

    /**
     * Insert truncated and out of range data but hide SQL warnings.
     */

    public function testHideSqlWarnings() {
        $result = $this->executeOverseerAction('xdmod.ingestor-tests.test-sql-warnings', '-o "hide_sql_warnings=true"');

        $this->assertEquals(0, $result['exit_status'], "Exit code");

        // We are expecting no warnings to be returned

        $numWarnings = 0;

        if ( ! empty($result['stdout']) ) {
            foreach ( explode(PHP_EOL, trim($result['stdout'])) as $line ) {
                $this->assertNotRegExp('/\[warning\]/', $line);
                $numWarnings++;
            }
        }

        $this->assertEquals(0, $numWarnings, 'Expected number of SQL warnings');
        $this->assertEquals('', $result['stderr'], "Std Error");
    }

    /**
     * Insert truncated and out of range data but hide SQL warnings for incorrect values,
     * leaving warnings for out of range values.
     */

    public function testHideSqlWarningCodes() {
        $result = $this->executeOverseerAction('xdmod.ingestor-tests.test-sql-warnings', '-o "hide_sql_warning_codes=1366"');

        $this->assertEquals(0, $result['exit_status'], "Exit code");

        /* We are expecting output such as:
         *
         * 2018-03-08 13:49:08 [warning] SQL warnings on table '`modw_cloud`.`warning_test`' generated by action sql-warning-test
         * 2018-03-08 13:49:08 [warning] Warning 1264 Out of range value for column 'resource_id' at row 1
         */

        $numWarnings = 0;

        if ( ! empty($result['stdout']) ) {
            foreach ( explode(PHP_EOL, trim($result['stdout'])) as $line ) {
                $this->assertRegExp('/\[warning\]/', $line);
                $numWarnings++;
            }
        }

        $this->assertGreaterThanOrEqual(2, $numWarnings, 'Expected number of SQL warnings');
        $this->assertEquals('', $result['stderr'], "Std Error");

        // Run the same action, but filter all expected warning codes.
        $result = $this->executeOverseerAction('xdmod.ingestor-tests.test-sql-warnings', '-o "hide_sql_warning_codes=[1264,1366]"');

        $this->assertEquals(0, $result['exit_status'], "Exit code");
        $numWarnings = 0;

        if ( ! empty($result['stdout']) ) {
            foreach ( explode(PHP_EOL, trim($result['stdout'])) as $line ) {
                $this->assertRegExp('/\[warning\]/', $line);
                $numWarnings++;
            }
        }

        $this->assertEquals(0, $numWarnings, 'Expected number of SQL warnings');
        $this->assertEquals('', $result['stderr'], "Std Error");
    }

    /**
     * Execute the ETL overseer.
     *
     * @param string $action The name of the action to execute.
     * @param string $localOptions A string of additional options to pass to the overseer.
     */

    private function executeOverseerAction($action, $localOptions = "")
    {
        // Note that tests are run in the directory where the PHP class is defined.
        $overseer = realpath(BASE_DIR . '/tools/etl/etl_overseer.php');
        $configFile = realpath(BASE_DIR . '/tests/artifacts/xdmod/etlv2/configuration/input/xdmod_etl_config_8.0.0.json');
        $options = sprintf('-c %s -a %s %s -v warning', $configFile, $action, $localOptions);
        $command = sprintf('%s %s', $overseer, $options);
        $pipes = array();

        $process = proc_open(
            $command,
            array(
                0 => array('file', '/dev/null', 'r'),  // STDIN
                1 => array('pipe', 'w'),               // STDOUT
                2 => array('pipe', 'w'),               // STDERR
            ),
            $pipes
        );

        if ( ! is_resource($process) ) {
            throw new Exception(sprintf('Failed to create %s subprocess', $command));
        }

        $stdout = stream_get_contents($pipes[1]);

        if ( false === $stdout ) {
            throw new Execption('Failed to get subprocess STDOUT');
        }

        $stderr = stream_get_contents($pipes[2]);

        if (false === $stderr) {
            throw new Execption('Failed to get subprocess STDERR');
        }

        $exitStatus = proc_close($process);

        return array(
            'exit_status' => $exitStatus,
            'stdout' => $stdout,
            'stderr' => $stderr,
        );
    }

    /**
     * Clean up tables created during the tests
     *
     * @return Nothing
     */

    public static function tearDownAfterClass()
    {
        $dbh = DB::factory('database');
        $dbh->execute('DROP TABLE IF EXISTS `test`.`load_data_infile_test`');
    }
}
