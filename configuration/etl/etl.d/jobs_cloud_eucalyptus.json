{
    "defaults": {

        "global": {
            "endpoints": {
                "source": {
                    "type": "mysql",
                    "name": "Cloud DB",
                    "config": "datawarehouse",
                    "schema": "modw_cloud",
                    "create_schema_if_not_exists": true
                },
                "destination": {
                    "type": "mysql",
                    "name": "Cloud DB",
                    "config": "datawarehouse",
                    "schema": "modw_cloud",
                    "create_schema_if_not_exists": true
                }
            }
        },

        "jobs-cloud-eucalyptus": {
            "namespace": "ETL\\Ingestor",
            "options_class": "IngestorOptions",
            "truncate_destination": false,
            "enabled": true
        }
    },

    "#": "Current Cloud job ingestion",

    "jobs-cloud-eucalyptus": [
        {
            "name": "EucalyptusRawCloudEventLogIngestor",
            "description": "Raw Eucalyptus cloud instance data from log files",
            "class": "StructuredFileIngestor",
            "definition_file": "cloud_eucalyptus/raw_cloud_job_logs.json",
            "truncate_destination": true,
            "endpoints": {
                "source": {
                    "type": "directoryscanner",
                    "name": "Eucalyptus event logs",
                    "#": "Relative paths are searched in $BASEDIR/etl_data.d",
                    "path": "/path/to/eucalyptus/log/files",
                    "directory_pattern": "/[0-9]{4}-[0-9]{2}-[0-9]{2}/",
                    "file_pattern": "/acct\\.json/",
                    "#": "Recursion depth is relative to the path",
                    "recursion_depth": 1,
                    "handler": {
                        "type": "jsonfile",
                        "record_separator": "\n",
                        "record_schema_path": "cloud/event.schema.json",
                        "#": "Explicitly specify field names as some are optional",
                        "field_names": [
                            "instance_id",
                            "event_type",
                            "event_data",
                            "event_time",
                            "record_type",
                            "account",
                            "node_controller",
                            "image_type",
                            "instance_type",
                            "root_type",
                            "block_devices",
                            "public_ip",
                            "private_ip"
                        ],
                        "filters": [ {
                            "type": "external",
                            "name": "jq",
                            "path": "jq",
                            "arguments": "-c 'select(.event_type != \"VOL_STATE_REPORT\") | select((.event_type == \"STATE_REPORT\" and .node_controller) // .event_type != \"STATE_REPORT\")'"
                        }]
                    }
                }
            },
            "stop_on_exception" : false
        },
        {
            "#": "An event can specify an array of block devices associated with it.  Re-process",
            "#": "the log files and for each event containing block devices, transform these each of",
            "#": "these device array elements into individual devive records with select event",
            "#": "metadata.",

            "name": "EucalyptusRawCloudVolumeIngestor",
            "description": "Raw Eucalyptus block devices associated with an event",
            "class": "StructuredFileIngestor",
            "definition_file": "cloud_eucalyptus/raw_volume.json",
            "truncate_destination": true,
            "endpoints": {
                "source": {
                    "type": "directoryscanner",
                    "name": "Eucalyptus volume logs",
                    "path": "cloud_eucalyptus/ccr-cbls-2",
                    "directory_pattern": "/[0-9]{4}-[0-9]{2}-[0-9]{2}/",
                    "file_pattern": "/acct\\.json/",
                    "#": "Recursion depth is relative to the path",
                    "recursion_depth": 1,
                    "# last_modified_start": "now - 30 days",
                    "handler": {
                        "type": "jsonfile",
                        "record_separator": "\n",
                        "record_schema_path": "cloud/event.schema.json",
                        "#": "Return one record for each element in the block_devices array.",
                        "#": ".block_devices[] returns a result for each block_device array element",
                        "#": "so use this to create one object per element and then move the keys",
                        "#": "from nested the block_devices object into the main object",
                        "filters": [{
                            "type": "external",
                            "name": "jq",
                            "path": "jq",
                            "arguments" :"-c 'select(.block_devices) | {instance_id: .instance_id, account_number: .account, event_time: .event_time, bd: .block_devices[]} | foreach .bd as $i (.; . + $i) | del(.bd)'"
                        }]
                    }
                }
            },
            "stop_on_exception": false
        },
        {
            "name": "EucalyptusCloudAccountIngestor",
            "description": "Eucalyptus cloud account data",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/account.json"
        },
        {
            "name": "EucalyptusCloudHostIngestor",
            "description": "Eucalyptus cloud host data",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/host.json"
        },
        {
            "name": "EucalyptusCloudImageIngestor",
            "description": "Eucalyptus cloud image data",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/image.json"
        },
        {
            "name": "EucalyptusCloudInstanceTypeIngestor",
            "description": "Eucalyptus cloud instance type data",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/instance_type.json"
        },
        {
            "name": "EucalyptusCloudInstanceIngestor",
            "description": "Eucalyptus cloud instance data",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/instance.json"
        },
        {
            "name": "EucalyptusCloudVolumeAssetIngestor",
            "description": "Eucalyptus cloud attachable volume (block device) data from raw logs",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/volume.json"
        },
        {
            "name": "EucalyptusCloudPostIngestUpdates",
            "description": "Post-ingest updates for massaging Eucalyptus data",
            "namespace": "ETL\\Maintenance",
            "options_class": "MaintenanceOptions",
            "class": "ExecuteSql",
            "sql_file_list": [
                "cloud_eucalyptus/post_ingest_updates.sql"
            ]
        },
        {
            "#": "Events must be ingested after all other dimensions",
            "name": "EucalyptusCloudStagingEventIngestor",
            "description": "Eucalyptus staging data for cloud events",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/staging_event.json"
        },
        {
            "#": "Instance data must be ingested after staging events",
            "name": "EucalyptusCloudRootVolumeAssetIngestor",
            "description": "Infer Eucalyptus instance root volume data from instance types",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/root_volume.json"
        },
        {
            "#": "Instance data must be ingested after staging events",
            "name": "EucalyptusCloudIpAddressAssetIngestor",
            "description": "Eucalyptus cloud attachable IP address data from staging events",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/ip_address.json"
        },
        {
            "#": "Instance data must be ingested after staging events",
            "name": "EucalyptusCloudEventIngestor",
            "description": "Eucalyptus cloud event and instance data",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/event.json"
        },
        {
            "#": "Asset data must be ingested after events",
            "name": "EucalyptusCloudEventAssetRootVolumeIngestor",
            "description": "Eucalyptus cloud instance root volume assets associated with START events",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/event_asset_root_volume.json"
        },
        {
            "#": "Asset data must be ingested after events",
            "name": "EucalyptusCloudEventAssetIngestor",
            "description": "Eucalyptus cloud assets associated with events",
            "class": "DatabaseIngestor",
            "definition_file": "cloud_eucalyptus/event_asset.json"
        }
    ]
}
